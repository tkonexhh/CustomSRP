// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClusterAABB
#pragma kernel AssignLightsToClusters

#include "./ClusterBasedLightingCommon.hlsl"

//其实就是最大光源数量
#define NUM_THREADS 100

RWStructuredBuffer<float3> RWClusterAABBMins;
RWStructuredBuffer<float3> RWClusterAABBMaxs;

[numthreads(NUM_THREADS, 1, 1)]
void ClusterAABB(uint3 id : SV_DispatchThreadID)
{
    
    uint clusterIndex1D = id.x;

    //将1D转化为3D
    uint3 clusterIndex3D = ComputeClusterIndex3D(clusterIndex1D);

    // Compute the near and far planes for cluster K.
    Plane nearPlane = {
        0.0f, 0.0f, 1.0f, clusterIndex3D.z * ClusterCB_Size.z
    };
    Plane farPlane = {
        0.0f, 0.0f, 1.0f, (clusterIndex3D.z + 1) * ClusterCB_Size.z
    };

    // The top-left point of cluster K in screen space.
    float4 pMin = float4(clusterIndex3D.xy * ClusterCB_Size.xy, 0.0f, 1.0f);
    // The bottom-right point of cluster K in screen space.
    float4 pMax = float4((clusterIndex3D.xy + 1) * ClusterCB_Size.xy, 0.0f, 1.0f);

    // Transform the screen space points to view space.
    pMin = ScreenToView(pMin);
    pMax = ScreenToView(pMax);

    pMin.z *= -1;
    pMax.z *= -1;

    // Find the min and max points on the near and far planes.
    float3 nearMin, nearMax, farMin, farMax;
    // Origin (camera eye position)
    float3 eye = float3(0, 0, 0);
    IntersectLinePlane(eye, (float3)pMin, nearPlane, nearMin);
    IntersectLinePlane(eye, (float3)pMax, nearPlane, nearMax);
    IntersectLinePlane(eye, (float3)pMin, farPlane, farMin);
    IntersectLinePlane(eye, (float3)pMax, farPlane, farMax);

    float3 aabbMin = min(nearMin, min(nearMax, min(farMin, farMax)));
    float3 aabbMax = max(nearMin, max(nearMax, max(farMin, farMax)));

    // AABB aabb = {
    //     aabbMin, aabbMax
    // };
    
    RWClusterAABBMins[clusterIndex1D] = aabbMin;
    RWClusterAABBMaxs[clusterIndex1D] = aabbMax;
}


///////////////////////////////////////////
RWStructuredBuffer<uint> RWPointLightIndexCounter_Cluster;// : register(u2);
RWStructuredBuffer<uint2> RWLightAssignTable;// : register(u4);
RWStructuredBuffer<uint> RWPointLightIndexList_Cluster;// : register(u6);

StructuredBuffer<float3> ClusterAABBMins;//第一步算好的全部Cluster信息
StructuredBuffer<float3> ClusterAABBMaxs;
StructuredBuffer<float4> PointLights;//全部点光源信息

uint PointLightCount;//点光源总数量
float4x4 _CameraLastViewMatrix;

//groupshared 是一个cluster共有了 在AssignLightsToClusters 一次执行过程中共有
groupshared uint gs_ClusterIndex1D;
groupshared uint3 gs_ClusterIndex3D;
groupshared AABB gs_ClusterAABB;

groupshared uint gs_PointLightCount;//此Cluster的光源个数
groupshared uint gs_PointLightStartOffset;//总点光源 list 中的起始位置位置
groupshared uint gs_PointLightList[NUM_THREADS];//点光源总列表


float4 TransformWorldToView(float4 posWorld)
{
    
    float4 posView = mul(_CameraLastViewMatrix, posWorld);
    // posView.z *= -1;
    return posView;
}

void AppendLight(uint lightIndex)
{
    uint index; // Index into the visible lights array.
    InterlockedAdd(gs_PointLightCount, 1, index);
    if (index < NUM_THREADS)
    {
        gs_PointLightList[index] = lightIndex;
    }
}

//光源求交
//每个Cluster执行一次 遍历全部灯光
// [numthreads(NUM_THREADS, 1, 1)]
[numthreads(10, 10, 1)]
void AssignLightsToClusters(ComputeShaderInput IN)
{
    
    // uint i = IN.GroupThreadID.x, j = IN.GroupThreadID.y, k = IN.GroupID.x;
    // uint3 clusterId_3D = uint3(i, j, k);
    // uint clusterId_1D = ComputeClusterIndex1D(clusterId_3D);
    // AABB aabb = ClusterAABBs[clusterId_1D];

    // uint startIndex = clusterId_1D * 10;
    // uint endIndex = startIndex;

    // for (int lid = 0; lid < PointLightCount; lid++)
    // {
    //     PointLight pointLight = PointLights[i];
    //     float3 pointLightPositionVS = TransformWorldToView(float4(pointLight.position, 1)).xyz;
    //     Sphere sphere = {
    //         pointLightPositionVS, pointLight.range
    //     };

    //     if (SphereInsideAABB(sphere, aabb))
    //     {
    //         AppendLight(lid);
    //         RWPointLightIndexList_Cluster[endIndex++] = uint(lid);
    //     }
    // }

    // LightIndex lightIndex;
    // lightIndex.start = startIndex;
    // lightIndex.count = endIndex - startIndex;
    // RWLightAssignTable[clusterId_1D] = lightIndex;


    uint i;//当前光源下标
    //此核心首次调用时候 初始化groupshared变量
    if (IN.GroupIndex == 0)
    {
        gs_PointLightCount = 0;//此Cluster总光源数量置为0
        //一维坐标
        // gs_ClusterIndex1D = IN.GroupID.x;//执行XYZ次 那么这个可以作为1D坐标

        gs_ClusterIndex3D = IN.GroupID;
        gs_ClusterIndex1D = ComputeClusterIndex1D(gs_ClusterIndex3D);
        float3 aabbmin = ClusterAABBMins[gs_ClusterIndex1D];
        float3 aabbmax = ClusterAABBMaxs[gs_ClusterIndex1D];
        gs_ClusterAABB.Min = aabbmin;
        gs_ClusterAABB.Max = aabbmax;
    }

    // 阻塞进程
    // 等待对GroupShared变量的访问
    GroupMemoryBarrierWithGroupSync();

    //计算当前 cluster  所受点光源影响的总个数 并填充光源index 列表
    // for (i = 0; i < PointLightCount; i++)
    for (i = IN.GroupIndex; i < PointLightCount; i += NUM_THREADS)
    {
        // PointLight pointLight = PointLights[i];
        float3 pointLightPos = PointLights[i].xyz;
        float pointLightRange = PointLights[i].w;
        float3 pointLightPositionVS = TransformWorldToView(float4(pointLightPos, 1)).xyz;
        //pointLightPositionVS *= float3(1, 1, -1);
        //pointLightPositionVS = pointLight.position;
        //灯光是世界坐标的 需要放在同一坐标系下
        //AABB都是基于0矩阵的 非世界坐标
        Sphere sphere = {
            pointLightPositionVS, pointLightRange
        };

        //AppendLight(i);

        if (SphereInsideAABB(sphere, gs_ClusterAABB))
        {
            //向目标cluster添加pointlight 下标
            //gs_PointLightCount ++
            //每个cluster存放的pointLightIndex 填充pointlist 的列表
            AppendLight(i);
        }
    }

    //阻塞进程
    GroupMemoryBarrierWithGroupSync();

    //使用gs_PointLightStartOffset，gs_PointLightCount，填充light grid
    // Now update the global light grids with the light lists and light counts.
    if (IN.GroupIndex == 0)
    {
        // Update light grid for point lights.
        //gs_PointLightCount 是本次计算的点光源数量
        InterlockedAdd(RWPointLightIndexCounter_Cluster[0], gs_PointLightCount, gs_PointLightStartOffset);
        // 存放的是起始坐标 以及总数量 这样就可以方便计算了
        LightIndex lightIndex;
        lightIndex.start = gs_PointLightStartOffset;
        lightIndex.count = gs_PointLightCount;
        RWLightAssignTable[gs_ClusterIndex1D] = uint2(lightIndex.start, lightIndex.count);
    }


    GroupMemoryBarrierWithGroupSync();

    //填充light 列表
    // Now update the global light index lists with the group shared light lists.
    for (i = IN.GroupIndex; i < gs_PointLightCount; i += NUM_THREADS)
    {
        RWPointLightIndexList_Cluster[gs_PointLightStartOffset +i] = gs_PointLightList[i];
    }
}
